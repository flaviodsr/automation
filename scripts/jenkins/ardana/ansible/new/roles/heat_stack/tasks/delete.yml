---

- name: Ensure stack is not in a pending state before deleting it
  command: |
    openstack --os-cloud {{ os_cloud }} stack show {{ heat_stack_name }} \
      -c stack_status -f value
  register: stack_status
  retries: 100
  until: "'IN_PROGRESS' not in stack_status.stdout"
  delay: 10

- block:
    - name: Delete stack '{{ heat_stack_name }}'
      os_stack:
        cloud: "{{ os_cloud }}"
        name: "{{ heat_stack_name }}"
        state: absent
        api_timeout: "{{ api_timeout }}"
      when: "'DELETE_COMPLETE' not in stack_status.stdout"
  rescue:
    - name: Force delete stack resources when delete failed
      command: |
         openstack --os-cloud {{ os_cloud }} stack resource list --filter \
           type={{ item.type }} -f value -c physical_resource_id {{ heat_stack_name }} |
           awk '{print "openstack --os-cloud '{{ os_cloud }}' {{ item.name }} \
           delete --wait "$1 }' | sh -x || :
      loop:
        - name: "server"
          type: "OS::Nova::Server"
        - name: "volume"
          type: "OS::Cinder::Volume"
        - name: "network trunk"
          type: "OS::Neutron::Trunk"
        - name: "port"
          type: "OS::Neutron::Port"
        - name: "router"
          type: "OS::Neutron::Router"
        - name: "subnet"
          type: "OS::Neutron::Subnet"
        - name: "network"
          type: "Neutron::Net"

    - name: Retry delete stack
      os_stack:
        cloud: "{{ os_cloud }}"
        name: "{{ heat_stack_name }}"
        state: absent
        api_timeout: "{{ api_timeout }}"
      register: stack_status
      retries: 3
      until: "stack_status.rc == 0"
      delay: 10
      failed_when: false
  always:
    - name: Wait until stack '{{ heat_stack_name }}' is completely deleted
      command: |
        openstack --os-cloud {{ os_cloud }} stack show {{ heat_stack_name }} \
          -c stack_status -f value
      register: stack_status
      retries: 100
      until: "'DELETE_COMPLETE' not in stack_status.stdout"
      delay: 10
      failed_when: False
