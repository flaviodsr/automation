---

- name: Prepare first time deployer access
  hosts: "localhost"
  gather_facts: false
  vars:
    task: "deploy"

  tasks:
    - block:
        - name: Get node(s) IP(s) from heat stack
          set_fact:
            clm_floating_ip: "{{ heat_stack_output | selectattr('output_key', 'equalto', 'admin-floating-ip') | map(attribute='output_value') | list | join('') }}"
            clm_mgmt_ip: "{{ heat_stack_output | selectattr('output_key', 'equalto', 'admin-mgmt-ip') | map(attribute='output_value') | list | join('') }}"
            controller_mgmt_ips: "{{ heat_stack_output | selectattr('output_key', 'equalto', 'controller-mgmt-ips') | map(attribute='output_value') | list | flatten }}"
            compute_mgmt_ips: "{{ heat_stack_output | selectattr('output_key', 'equalto', 'compute-mgmt-ips') | map(attribute='output_value') | list | flatten }}"
            cacheable: true
          when: not is_physical_deploy

        - name: Ensure deployer on ansible inventory file when virtual deploy
          blockinfile:
            path: "inventory"
            insertafter: "\\[deployer_virt\\]"
            block: |
              {{ ardana_env }}      ansible_host={{ clm_floating_ip }}
          when: not is_physical_deploy

        - name: Configure first time deployer access
          add_host:
            name: "{{ ardana_env }}"
            ansible_host: "{{ is_physical_deploy | ternary(omit, clm_floating_ip) }}"
            ansible_password: "linux"
      rescue:
        - include_role:
            name: rocketchat_notify
          vars:
            rc_action: "finished"
            rc_state: "Failed"
          when: rc_notify

        - name: Stop if something failed
          fail:
            msg: "{{ task }} failed."


- name: Ensure public keys on deployer
  hosts: "{{ ardana_env }}"
  remote_user: root
  gather_facts: false
  vars:
    task: "deploy"

  tasks:
    - block:
        - include_role:
            name: ssh_keys
      rescue:
        - include_role:
            name: rocketchat_notify
          vars:
            rc_action: "finished"
            rc_state: "Failed"
          when: rc_notify

        - name: Stop if something failed
          fail:
            msg: "{{ task }} failed."
