[client]
default_character_set = utf8
port = {{ mysql_client_port }}
ssl-ca = {{ mysql_ca_certs }}
socket		= {{ mysql_socket }}

[mysqld]
# Charset
character_set_server = utf8
collation_server = utf8_unicode_ci
skip-character-set-client-handshake

user		  = {{ mysql_user }}
pid-file	= {{ mysql_pid_file }}
basedir		= {{ mysql_basedir }}
datadir		= {{ mysql_datadir }}
tmpdir		= {{ mysql_tmpdir }}
lc-messages-dir	= {{ mysql_lc_messages_dir }}
skip-external-locking

# Networking
bind-address		= {{ mysql_bind_address }}
port            = {{ mysql_server_port }}
socket		      = {{ mysql_socket }}

# When a client connects, the server will perform hostname resolution,
# and when DNS is slow, establishing the connection will become slow as well.
# It is therefore recommended to start the server with skip-name-resolve to
# disable all DNS lookups. The only limitation is that the GRANT statements
# must then use IP addresses only.
skip_name_resolve

# Logging
slow_query_log                = off
slow_query_log_file           = /var/log/mysql/mariadb-slow.log
log_warnings                  = 2
long_query_time               = 3
log_queries_not_using_indexes = on

# General logging has huge performance penalty therefore is disabled by default
general_log      = off
general_log_file = /var/log/mysql/mariadb-error.log

# Tuning
max_allowed_packet     = 256M
open_files_limit       = 10240
max_connections        = 8192
max-connect-errors     = 1000000
sync_binlog            = 0
thread_cache_size      = 16
table_open_cache       = 2048
table_definition_cache = 1024


## Generally, it is unwise to set the query cache to be larger than 64-128M
## as the costs associated with maintaining the cache outweigh the performance
## gains.
## The query cache is a well known bottleneck that can be seen even when
## concurrency is moderate. The best option is to disable it from day 1
## by setting query_cache_size=0 (now the default on MySQL 5.6)
## and to use other ways to speed up read queries: good indexing, adding
## replicas to spread the read load or using an external cache.
query_cache_size = 0
query_cache_type = 0

#
# InnoDB
#
# The buffer pool is where data and indexes are cached: having it as large as possible
# will ensure you use memory and not disks for most read operations.
# Typical values are 50..75% of available RAM.
innodb_buffer_pool_size = 2048M
innodb_doublewrite      = 0
innodb_file_format      = Barracuda
innodb_file_per_table   = 1
innodb_flush_method     = O_DIRECT
innodb_io_capacity      = 500
innodb_locks_unsafe_for_binlog = 1
innodb_log_file_size    = 128M
innodb_old_blocks_time  = 1000
innodb_read_io_threads  = 8
innodb_write_io_threads = 8


{% if mysql_admin_bind_tls | bool %}
ssl-cert = {{ mysql_server_cert }}
ssl-key = {{ mysql_server_key }}
ssl-ca = {{ mysql_ca_certs }}
{% endif %}


# Clustering
wsrep_on = ON
wsrep_provider = {{ mysql_wsrep_provider }}

# In order for Galera to work correctly binlog format should be ROW
binlog_format = {{ mysql_binlog_format }}

# MyISAM storage engine has only experimental support
default_storage_engine = {{ mysql_default_storage_engine }}

# This changes how InnoDB autoincrement locks are managed and is a requirement for Galera
innodb_autoinc_lock_mode = {{ mysql_innodb_autoinc_lock_mode }}

# cluster name
wsrep_cluster_name = {{ mysql_wsrep_cluster_name }}
wsrep_node_address = {{ mysql_wsrep_node_address }}
wsrep_retry_autocommit = 3

{% if mysql_gcomms_bind_tls | bool %}
# TLS gcomms listener
wsrep_provider_options = "gmcast.listen_addr=tcp://{{ mysql_gmcast_ip ~ ':' ~ mysql_gmcast_port }};socket.ssl_key={{ mysql_gcomms_key }};socket.ssl_cert={{ mysql_gcomms_cert }};socket.ssl_ca={{ mysql_ca_certs }}"
{% else %}
wsrep_provider_options = "gmcast.listen_addr=tcp://{{ mysql_gmcast_ip ~ ':' ~ mysql_gmcast_port }}"
{% endif %}

{% set cluster_addresses = [] %}
{%- for h in mysql_mdb_servers %}
    {%- set _ = cluster_addresses.append(h.host) -%}
{% endfor -%}

wsrep_cluster_address = gcomm://{{ ",".join(cluster_addresses) }}

# SST method
wsrep_sst_method = {{ mysql_wsrep_sst_method }}

# authentication for SST method
wsrep_sst_auth = {{ mysql_wsrep_sst_auth }}

[sst]
inno-backup-opts="--skip-ssl"
{% if mysql_sst_bind_tls | bool %}
# TLS sst listener
encrypt=3
tkey={{ mysql_sst_key }}
tcert={{ mysql_sst_cert}}
{% endif %}

[mysqldump]
quick
quote-names
max_allowed_packet	= 16M
