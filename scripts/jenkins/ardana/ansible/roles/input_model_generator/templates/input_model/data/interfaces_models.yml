#
# (c) Copyright 2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
  product:
    version: 2

  interface-models:
{% if 'interface_models' in scenario %}
{%    for model in scenario['interface_models'] %}
{%      for service_group in model['service_groups'] %}
{%      set ns = namespace(intf_id=0) %}
    - name: {{ service_group | upper }}-INTERFACES
      network-interfaces:
{%        for interface in model['network_interfaces'] %}
{%          set ns.intf_id = ns.intf_id + 1 %}
        - name: {{ 'bond' if 'bond' in interface else 'hed' }}{{ ns.intf_id }}
          device:
            name: {{ 'bond' if 'bond' in interface else 'hed' }}{{ ns.intf_id }}
{%          if 'bond' in interface %}
          bond-data:
            options:
              mode: {{ interface.bond.mode | default ('active-backup') }}
              miimon: 200
              primary: hed{{ ns.intf_id }}
            provider: linux
            devices:
              - name: hed{{ ns.intf_id }}
{%            for bintf_id in range(ns.intf_id, interface.bond.num_interfaces + ns.intf_id-1) %}
{%              set ns.intf_id = ns.intf_id + 1 %}
              - name: hed{{ ns.intf_id }}
{%            endfor %}
{%          endif %}
{%          if 'network_groups' in interface %}
          network-groups:
{{ interface['network_groups'] | to_nice_yaml | indent(12, True) }}
{%          endif %}
{%          if 'forced_network_groups' in interface %}
          forced-network-groups:
{{ interface['forced_network_groups'] | to_nice_yaml | indent(12, True) }}
{%          endif %}
{%        endfor %}
{%      endfor %}
{%    endfor %}
{% else %}
{% for service_group in scenario['service_groups'] if service_group['member_count']|int %}
    - name: {{ service_group.name|upper }}-INTERFACES
      network-interfaces:
{%   set ns = namespace(intf_id=0) %}
{%   set processed_groups = [] %}
{%   for network_group in scenario['network_groups'] %}
{%     if network_group.name not in processed_groups and
          ('CLM' in network_group['component_endpoints'] or
          'MANAGEMENT' in network_group['component_endpoints'] or

          ('EXTERNAL-API' in network_group['component_endpoints'] and
            'CORE' in service_group['service_components']) or

          ('INTERNAL-API' in network_group['component_endpoints'] and
           ('CORE' in service_group['service_components'] or
            'SWPAC' in service_group['service_components'] or
            'SWOBJ' in service_group['service_components'])) or

          (('NEUTRON-VLAN' in network_group['component_endpoints'] or
            'NEUTRON-VXLAN' in network_group['component_endpoints'] or
            'NEUTRON-EXT' in network_group['component_endpoints']) and
           ('CORE' in service_group['service_components'] or
            'NEUTRON' in service_group['service_components'] or
            'COMPUTE' in service_group['service_components'])) or

          ('SWIFT' in network_group['component_endpoints'] and
           ('CORE' in service_group['service_components'] or
            'SWPAC' in service_group['service_components'] or
            'SWOBJ' in service_group['service_components'])))
        %}
{%       set ns.intf_id = ns.intf_id+1 %}
{%       if 'bond' in network_group.keys() %}
        - name: bond{{ ns.intf_id }}
          device:
            name: bond{{ ns.intf_id }}
          bond-data:
            options:
              mode: {{ network_group.bond.mode | default ('active-backup') }}
              miimon: 200
              primary: hed{{ ns.intf_id }}
            devices:
              - name: hed{{ ns.intf_id }}
{%          for intf_id in range(ns.intf_id, network_group.bond.num_interfaces) %}
{%            set ns.intf_id = ns.intf_id+1 %}
              - name: hed{{ ns.intf_id }}
{%          endfor %}
{%       else %}
        - name: hed{{ ns.intf_id }}
          device:
              name: hed{{ ns.intf_id }}
{%       endif %}
          network-groups:
            - {{ network_group.name|upper }}
{%       for ng in network_group.include_groups | default([]) if 'CLM' not in service_group['service_components'] %}
            - {{ ng }}
{{          processed_groups.append(ng) }}
{%-        endfor %}

{%     endif %}
{%   endfor %}
{% endfor %}
{% endif %}
